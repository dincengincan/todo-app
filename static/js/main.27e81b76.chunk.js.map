{"version":3,"sources":["style.js","actions/actions.js","actionCreators/actionCreators.js","AddTodo/style.js","AddTodo/AddTodo.js","ResetAll/style.js","ResetAll/ResetAll.js","Todo/style.js","Todo/Todo.js","TodoList/style.js","TodoList/TodoList.js","Filters/style.js","Filters/Filters.js","App.js","serviceWorker.js","reducer/reducer.js","store.js","index.js"],"names":["Styled","TodoWrapper","styled","div","H1","h1","H3","h3","SET_FILTER","RESET_TODOS","SET_TODOS","ADD_TODO","REMOVE_TODO","TOGGLE_COMPLETE_STATUS","SHOW_NOTIFICATION","HIDE_NOTIFICATION","showNotification","text","dispatch","type","setTimeout","Button","button","props","notification","Input","input","AddTodo","handleChange","e","preventDefault","newValue","target","value","setState","onAddTodo","addTodo","state","newTodo","content","id","Math","random","checked","this","notificationVisibility","console","log","placeholder","todos","length","onSubmit","onChange","React","Component","connect","todo","getState","isThere","some","item","todosLength","resetTodos","onClick","Todo","TodoItem","TodoChecked","toggleCompleteStatus","removeTodo","stopPropagation","Div","TodoList","map","key","Filter","FilterActive","FilterContainer","options","label","labelKey","activeFilter","changeFilter","newFilter","setFilter","option","App","filterTodos","filterType","filter","localTodos","window","localStorage","getItem","JSON","parse","addTodos","prevProps","prevState","snapshot","stringify","setItem","transitionName","transitionEnterTimeout","transitionLeaveTimeout","notificationMessage","setTodos","Boolean","location","hostname","match","rootReducer","action","concat","newTodos","newStatusTodos","store","createStore","reducer","compose","applyMiddleware","thunk","devToolsExtension","f","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.27e81b76.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst TodoWrapper = styled.div`\r\n    text-align: center;\r\n    border: 1px solid white;\r\n    width: 600px;\r\n    height: auto;\r\n    box-shadow: 2px 3px 15px rgba(0, 0, 0, 0.5);\r\n    background: #e2e2e2fd;\r\n    margin: 40px auto;\r\n\r\n`;\r\n\r\nconst H1 = styled.h1`\r\n    color: rgb(187, 187, 187);\r\n    font-family: -apple-system, BlinkMacSystemFont, Helvetica Neue, Helvetica, Arial, sans-serif;\r\n    font-weight: 200;\r\n    margin: 70px auto 30px;\r\n    font-size: 100px\r\n\r\n`;\r\n\r\nconst H3 = styled.h3`\r\n    background-color: rgb(187, 187, 187);\r\n    padding: 10px; \r\n    margin: 70px auto 0px;\r\n    color: #e2e2e2fd;\r\n    font-family: -apple-system, BlinkMacSystemFont, Helvetica Neue, Helvetica, Arial, sans-serif;\r\n    font-weight: 360;\r\n\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport const Styled = {\r\n    TodoWrapper,\r\n    H1,\r\n    H3,\r\n    \r\n}\r\n\r\n\r\n","export const SET_FILTER = 'SET_FILTER';\r\nexport const RESET_TODOS = 'RESET_TODOS';\r\nexport const SET_TODOS = 'SET_TODOS';\r\nexport const ADD_TODO = 'ADD_TODO';\r\nexport const REMOVE_TODO = 'REMOVE_TODO';\r\nexport const TOGGLE_COMPLETE_STATUS = 'TOGGLE_COMPLETE_STATUS';\r\nexport const SHOW_NOTIFICATION = 'SHOW_NOTIFICATION';\r\nexport const HIDE_NOTIFICATION = 'HIDE_NOTIFICATION'","import {SET_FILTER, RESET_TODOS, SET_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_COMPLETE_STATUS, HIDE_NOTIFICATION, SHOW_NOTIFICATION } from \"../actions/actions\";\r\n\r\nexport function setFilter(newFilter){\r\n    return {type: SET_FILTER, activeFilter: newFilter}\r\n}\r\n\r\nexport function setTodos(todos){\r\n    return {type: SET_TODOS, todos}\r\n}\r\n\r\nexport function resetTodos(){\r\n    return (dispatch) => {\r\n        dispatch({type: RESET_TODOS});\r\n        dispatch(showNotification(`All todos were removed !`))\r\n    }\r\n}\r\n\r\nexport function addTodo(todo){\r\n    return (dispatch, getState) => {\r\n        const state = getState();\r\n        const isThere = state.todos.some(item => {\r\n            return item.content === todo.content\r\n          })\r\n        \r\n        if(!todo.content) {\r\n            dispatch(showNotification(`Type something !`))\r\n        }else if(isThere){\r\n            dispatch(showNotification(`You have already added \"${todo.content}\" !`))\r\n        }else{\r\n            dispatch({type: ADD_TODO, todo});\r\n            dispatch(showNotification(`\"${todo.content}\" was added !`))\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport function removeTodo(todo){\r\n    return (dispatch) => {\r\n        dispatch({type: REMOVE_TODO, todo});\r\n        dispatch(showNotification(`\"${todo.content}\" was removed !`))\r\n    }\r\n}\r\n\r\n\r\nexport function toggleCompleteStatus(id){\r\n    return {type: TOGGLE_COMPLETE_STATUS, id}\r\n}\r\n\r\nexport function showNotification(text){\r\n    return (dispatch) => {\r\n        dispatch({type: SHOW_NOTIFICATION, text});\r\n        setTimeout(() => {\r\n            dispatch(hideNotification());\r\n        }, 2000)\r\n    }\r\n}\r\n\r\nexport function hideNotification() {\r\n    return {type: HIDE_NOTIFICATION}\r\n}","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    color: white;\r\n    font-size: 1em;\r\n    width: 80px;\r\n    height: 40px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: pointer;\r\n    border: none;\r\n    background: #007991;\r\n    border-radius: 20px;\r\n    margin: 20px auto 0; \r\n    pointer-events: ${props => props.notification ? \"none\" : \"all\"};;\r\n\r\n    &:hover {\r\n        box-shadow: 0px 0px 10px gray;\r\n    }\r\n    \r\n`;\r\n\r\n\r\n\r\nconst Input = styled.input`\r\n    width: 58%;\r\n    padding: 10px;\r\n    font-size: 1em;\r\n    margin: 10px 10px 0;\r\n    border: solid 1px  #d6d6d6;\r\n    border-radius: 20px; \r\n    \r\n    &:hover {\r\n        box-shadow: 1px 1px 5px 1px rgba(0, 0, 0, 0.3);\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n\r\nexport const Styled = {\r\n    Button,\r\n    Input,\r\n}\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {addTodo} from \"../actionCreators/actionCreators\"\r\nimport {Styled} from './style'\r\n\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      input: \"\",\r\n    }\r\n  }\r\n\r\n  handleChange = (e) => {\r\n      e.preventDefault();\r\n      const newValue = e.target.value;\r\n      this.setState({\r\n          input: newValue\r\n      });\r\n  }\r\n\r\n  // Firstly, takes input and pass it to addTodo function to update the state.\r\n  // Secondly, reset the input field.\r\n  onAddTodo = (e) => {\r\n    e.preventDefault();\r\n    this.addTodo(this.state.input);\r\n        this.setState({\r\n            input: \"\"\r\n        })\r\n  }\r\n\r\n  // Takes the new input as newTodo, adds newTodo to redux state with given properties\r\n  addTodo = (newTodo) => {\r\n    this.props.addTodo({\r\n      content: newTodo, id: Math.random(), checked:false\r\n    })\r\n\r\n  }\r\n  \r\n  render(){\r\n    \r\n    \r\n    \r\n    const notification = this.props.notificationVisibility\r\n    console.log(notification)\r\n    \r\n    let placeholder = \"What needs to be done?\"\r\n    if(this.props.todos.length > 0){\r\n      placeholder = \"\"\r\n    }\r\n    \r\n    \r\n    return (\r\n      \r\n      <form onSubmit={this.onAddTodo} >                              \r\n        \r\n        <Styled.Input  type=\"text\" placeholder= {placeholder} value={this.state.input} onChange={this.handleChange} />\r\n       \r\n        <Styled.Button notification={this.props.notificationVisibility} >ADD</Styled.Button>\r\n        \r\n        \r\n      </form>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    todos: state.todos,\r\n    notificationVisibility: state.notificationVisibility,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addTodo: (todo) => {dispatch(addTodo(todo))}\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (AddTodo);","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    color: ${props => props.todosLength ? \"white\" : \"rgb(128, 128, 128)\"};\r\n    font-size: 1em;\r\n    width: 80px;\r\n    height: 40px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    cursor: ${props => props.todosLength ? \"pointer\" : \"not-allowed\"};\r\n    border: none;\r\n    background: ${props => props.todosLength ? \"#007991\" : \"#004d5c\"};\r\n    border-radius: 20px;\r\n    margin: 20px auto 0; \r\n    pointer-events: ${props => props.notification ? \"none\" : \"all\"};\r\n\r\n    &:hover {\r\n        box-shadow: ${props => props.todosLength ? \"0px 0px 10px gray\" : \"none\"}\r\n    }\r\n`;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const Styled = {\r\n    Button,\r\n    \r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {resetTodos} from \"../actionCreators/actionCreators\"\r\nimport { Styled } from './style';\r\n\r\n\r\n\r\nconst ResetAll = (props) => {\r\n    let {resetTodos, todos} = props;\r\n    return(\r\n        <div >\r\n\r\n          <Styled.Button todosLength={todos.length} notification={props.notificationVisibility} onClick={resetTodos} >RESET</Styled.Button>\r\n        \r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      todos: state.todos,\r\n      notificationVisibility: state.notificationVisibility,\r\n    }\r\n  };\r\n  \r\n  const mapDispatchToProps = dispatch => ({\r\n    resetTodos: () => {dispatch(resetTodos())}\r\n  })\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps) (ResetAll);","import styled from 'styled-components';\r\n\r\nconst Button = styled.button`\r\n    width: 35px;\r\n    height: 35px;\r\n    cursor: pointer;\r\n    background: #6c7b95;\r\n    border-radius: 20px;\r\n    color: white;\r\n    font-size: 15px;\r\n    margin-right: 5px;\r\n    border: none;\r\n\r\n    &:hover {\r\n        box-shadow: ${props => props.notification ? \"none\" : \"0px 0px 10px gray\"};\r\n    }\r\n`;\r\n\r\nconst Todo = styled.div`\r\n    width: 90%;\r\n    background-color: ${props => props.checked ? \"#e7e7e7fd\" : \"white\"};\r\n    border: 1px solid lightgrey;\r\n    box-shadow: 1px 1px 1px lightgrey;\r\n    padding: 12px;\r\n    margin-right: 10px;\r\n    border-radius: 40px;\r\n    cursor: pointer;\r\n    color: ${props => props.checked ? \"#c0c0c0fd\" : \"black\"};\r\n    text-decoration: ${props => props.checked ? \"line-through\" : \"none\"}\r\n\r\n    &:hover {\r\n        box-shadow: 1px 1px 5px 1px rgba(0, 0, 0, 0.3);\r\n    }\r\n`;\r\n\r\n\r\nconst TodoItem = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    margin-top: 10px;\r\n`;\r\nconst TodoChecked = styled(Todo)`\r\n    background-color: #e7e7e7fd;\r\n    text-decoration: line-through;\r\n    color: #c0c0c0fd;\r\n`;\r\n\r\n\r\n\r\nexport const Styled = {\r\n    Button,\r\n    Todo,\r\n    TodoChecked,\r\n    TodoItem,\r\n    \r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {toggleCompleteStatus, removeTodo} from \"../actionCreators/actionCreators\";\r\nimport {Styled} from './style'\r\n\r\n\r\n\r\n\r\n\r\nconst Todo = (props) => {\r\n    \r\n    return(\r\n            \r\n            <Styled.TodoItem onClick={() => props.toggleCompleteStatus(props.id)} >\r\n                  \r\n                  <Styled.Todo checked={props.checked}>{props.content}</Styled.Todo> \r\n                  \r\n                {\r\n                  props.notificationVisibility\r\n                  ? <Styled.Button notification={props.notificationVisibility} onClick = {(e)=> {e.stopPropagation()}} >X</Styled.Button>\r\n                  : <Styled.Button notification={props.notificationVisibility} onClick = {(e)=> {e.stopPropagation(); props.removeTodo(props)}} >X</Styled.Button>\r\n                }\r\n                  \r\n            </Styled.TodoItem>\r\n    )\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    notificationVisibility: state.notificationVisibility,\r\n  }\r\n};\r\n\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  toggleCompleteStatus: (id) => {dispatch(toggleCompleteStatus(id))},\r\n  removeTodo: (todo) => {dispatch(removeTodo(todo))}\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps) (Todo);","import styled from 'styled-components';\r\n\r\nconst Div = styled.div`\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    margin-top: 20px;\r\n    margin-bottom: 60px;\r\n`;\r\n\r\n\r\n\r\nexport const Styled = {\r\n    Div,\r\n}","import React from 'react';\r\nimport Todo from '../Todo/Todo';\r\nimport { Styled } from './style';\r\n\r\n\r\n\r\n\r\nexport const TodoList = (props) => {\r\n    return(\r\n        \r\n        <Styled.Div>\r\n        \r\n            {props.todos.map(todo => {\r\n                return <Todo {...todo}\r\n                        key={todo.id} />\r\n                })\r\n            }\r\n         \r\n        </Styled.Div>\r\n       \r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nconst Filter = styled.div`\r\n    width: 18%;\r\n    color: #c0c0c0fd;\r\n    padding: 3px;\r\n    margin-right: 10px;\r\n    border-radius: 40px;\r\n    border: solid 1px #d6d6d6;\r\n    cursor: pointer;\r\n    display: inline-block;\r\n`;\r\n\r\nconst FilterActive = styled(Filter)`\r\n    background-color:white;\r\n    color: black;\r\n`;\r\n\r\n\r\nconst FilterContainer = styled.div`\r\n    text-align: center;\r\n`;\r\n\r\n\r\nexport const Styled = {\r\n    Filter,\r\n    FilterActive,\r\n    FilterContainer,\r\n}","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {setFilter} from \"../actionCreators/actionCreators\";\r\nimport { Styled } from './style';\r\n\r\n\r\nconst options = [\r\n    {label: \"all\", labelKey: \"all\", id: 1},\r\n    {label: \"completed\", labelKey: \"completed\", id: 2},\r\n    {label: \"uncompleted\", labelKey: \"uncompleted\", id: 3}\r\n];\r\n\r\nconst Filters = (props) => {\r\n    return(\r\n        \r\n        <Styled.FilterContainer>\r\n            {\r\n                options.map((option) => {\r\n                    if(option.label === props.activeFilter){\r\n                        return <Styled.FilterActive onClick = {() => {props.changeFilter(option.labelKey)}} >{option.label}</Styled.FilterActive>\r\n                    }else{\r\n                        return <Styled.Filter onClick = {() => {props.changeFilter(option.labelKey)}} >{option.label}</Styled.Filter>\r\n                    }    \r\n                })\r\n            }\r\n        </Styled.FilterContainer>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return{\r\n        activeFilter: state.activeFilter\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    changeFilter: (newFilter) => {dispatch(setFilter(newFilter))}\r\n});\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filters);","import React from 'react';\nimport './App.css';\nimport { Styled } from './style';\nimport AddTodo from './AddTodo/AddTodo'\nimport ResetAll from './ResetAll/ResetAll'\nimport {TodoList} from './TodoList/TodoList'\nimport Filters from './Filters/Filters'\nimport {connect} from \"react-redux\";\nimport {setTodos} from \"./actionCreators/actionCreators\"\nimport {CSSTransitionGroup } from 'react-transition-group';\n\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n  }\n\n  filterTodos = (todos, filterType) => {\n    if(filterType === \"all\"){\n        return todos;\n    }else if (filterType === \"completed\"){\n        return todos.filter((todo) => todo.checked);\n    }else{\n        return todos.filter((todo) => !todo.checked);\n    }\n  }\n\n\n  componentDidMount() {\n    let localTodos = window.localStorage.getItem(\"todos\")\n    if(localTodos){\n      localTodos = JSON.parse(localTodos);\n    }\n\n    this.props.addTodos(localTodos || []);\n  }\n\n  //if there is change, this will update the localStorage\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if(JSON.stringify(prevProps.todos) !== JSON.stringify(this.props.todos)){\n      window.localStorage.setItem(\"todos\", JSON.stringify(this.props.todos))\n    }\n  }\n\n\n  render(){\n    return (\n      \n      <Styled.TodoWrapper>\n        <Styled.H1>todos</Styled.H1>\n        \n        <Filters   />\n        \n        <AddTodo   />\n\n        <ResetAll  />\n        \n        <TodoList todos = {this.filterTodos(this.props.todos, this.props.activeFilter)}\n        />\n\n        <CSSTransitionGroup \n          transitionName=\"example\"\n          transitionEnterTimeout={300}\n          transitionLeaveTimeout={700}\n         >\n            {\n              this.props.notificationVisibility && <Styled.H3 >{this.props.notificationMessage}</Styled.H3>\n            }\n        </CSSTransitionGroup>\n      \n      </Styled.TodoWrapper>\n      \n      \n    );\n  }\n  \n}\n\n\n\nconst mapStateToProps = state => {\n  return {\n    activeFilter: state.activeFilter,\n    todos: state.todos,\n    notificationVisibility: state.notificationVisibility,\n    notificationMessage: state.notificationMessage\n  }\n};\n\nconst mapDispatchToProps = dispatch => ({\n  addTodos: (todos) => {dispatch(setTodos(todos))},\n})\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {SET_FILTER, RESET_TODOS, SET_TODOS, ADD_TODO, REMOVE_TODO, TOGGLE_COMPLETE_STATUS, HIDE_NOTIFICATION, SHOW_NOTIFICATION} from \"../actions/actions\"\r\n\r\nconst rootReducer = function (state ={\r\n    activeFilter: \"all\",\r\n    todos: [],\r\n    notificationVisibility: false,\r\n    notificationMessage: \"\"\r\n}, action) {\r\n    switch (action.type) {\r\n       \r\n        case SET_FILTER:\r\n            return {...state, activeFilter: action.activeFilter}\r\n        \r\n        case SET_TODOS:\r\n            return {...state, todos: action.todos}\r\n        \r\n        case ADD_TODO:\r\n            return {...state, todos: state.todos.concat([action.todo])}\r\n        \r\n        case REMOVE_TODO:\r\n            const newTodos = state.todos.filter(item => {\r\n               return item.content !== action.todo.content\r\n             })\r\n            return {...state, todos: newTodos }\r\n        \r\n        case TOGGLE_COMPLETE_STATUS:\r\n            let newStatusTodos = state.todos.map(todo => {\r\n                if(action.id === todo.id){\r\n                  return {...todo, checked: !todo.checked}\r\n                }else{\r\n                  return todo;\r\n                }\r\n              })\r\n            return {...state, todos: newStatusTodos}\r\n\r\n        case RESET_TODOS:\r\n            return {...state, todos: []}\r\n        \r\n        case SHOW_NOTIFICATION:\r\n            return {...state, \r\n                    notificationVisibility: true, \r\n                    notificationMessage: action.text\r\n                }\r\n    \r\n        case HIDE_NOTIFICATION:\r\n            return {...state, \r\n                    notificationVisibility: false \r\n                }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nexport default rootReducer","import {createStore, compose, applyMiddleware } from 'redux';\r\nimport reducer from './reducer/reducer';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst store = createStore(reducer, compose(\r\n    applyMiddleware(thunk),\r\n    window.devToolsExtension ? window.devToolsExtension() : f => f\r\n));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport store from './store'\n\n\n\nconst ProvideApp = (props) => <Provider store={store}><App /></Provider>\nReactDOM.render(<ProvideApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}